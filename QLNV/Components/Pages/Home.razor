@page "/"

@using System.Threading
@using QLNV.ViewModels
@using QLNV.Services
@inject EmployeeService EmployeeService
@inject IDialogService DialogService

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h2 class="text-center">
  Hệ Thống Quản Lý Nhân Viên
</h2>

<MudDataGrid @ref="dataGrid" T="EmployeeViewModel" ServerData="ServerReload" Filterable="false">
  <ToolBarContent>
    @* <MudText Typo="Typo.h6">Danh Sách Nhân Viên</MudText> *@
    @* <MudText Typo="Typo.h6">Hệ Thống Quản Lý Nhân Viên</MudText> *@

    @* button thêm nhân viên *@
    <MudButton Class="me-2"
               @onclick="CreateEmployee"
               StartIcon="@Icons.Material.Filled.PersonAddAlt1"
               Variant="Variant.Filled"
               Color="Color.Primary">
      Thêm Nhân Viên
    </MudButton>

    <MudSpacer />
    <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
  </ToolBarContent>
  <Columns>
    <PropertyColumn Property="x => x.EmployeeIdView" Title="Mã Nhân Viên" />
    <PropertyColumn Property="x => x.FullName" Title="Họ Và Tên" />
    <PropertyColumn Property="x => x.Department" Title="Phòng Ban" />
    <PropertyColumn Property="x => x.DateOfBirth" Format="dd MM yyyy" Title="Ngày Sinh" />
    <PropertyColumn Property="x => x.Age" Title="Tuổi" />
    <PropertyColumn Property="x => x.PhoneNumber" Title="Số Điện Thoại" />
  </Columns>
  <PagerContent>
    <MudDataGridPager T="EmployeeViewModel" />
  </PagerContent>
</MudDataGrid>

@code {
  MudDataGrid<EmployeeViewModel> dataGrid;
  string searchString = null;

  /// <summary>
  /// Here we simulate getting the paged, filtered and ordered data from the server
  /// </summary>
  private async Task<GridData<EmployeeViewModel>> ServerReload(GridState<EmployeeViewModel> state)
  {
    IEnumerable<EmployeeViewModel> data = await EmployeeService.GetAllEmployees();
    await Task.Delay(300);
    data = data.Where(element =>
    {
      if (string.IsNullOrWhiteSpace(searchString))
        return true;
      if (element.EmployeeIdView.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;
      if (element.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;
      if (element.Department.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;
      if (element.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;
      if ($"{element.EmployeeId} {element.Age}".Contains(searchString))
        return true;
      return false;
    }).ToArray();
    var totalItems = data.Count();

    var sortDefinition = state.SortDefinitions.FirstOrDefault();
    if (sortDefinition != null)
    {
      switch (sortDefinition.SortBy)
      {
        case nameof(EmployeeViewModel.EmployeeIdView):
          data = data.OrderByDirection(
              sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
              o => o.EmployeeIdView
          );
          break;
        case nameof(EmployeeViewModel.FullName):
          data = data.OrderByDirection(
              sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
              o => o.FullName
          );
          break;
        case nameof(EmployeeViewModel.Department):
          data = data.OrderByDirection(
              sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
              o => o.Department
          );
          break;
        case nameof(EmployeeViewModel.DateOfBirth):
          data = data.OrderByDirection(
              sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
              o => o.DateOfBirth
          );
          break;
        case nameof(EmployeeViewModel.Age):
          data = data.OrderByDirection(
              sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
              o => o.Age
          );
          break;
        case nameof(EmployeeViewModel.PhoneNumber):
          data = data.OrderByDirection(
              sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
              o => o.PhoneNumber
          );
          break;
      }
    }

    var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
    return new GridData<EmployeeViewModel>
    {
      TotalItems = totalItems,
      Items = pagedData
    };
  }

  private Task OnSearch(string text)
  {
    searchString = text;
    return dataGrid.ReloadServerData();
  }

  private async Task CreateEmployee()
  {
    var options = new DialogOptions { MaxWidth = MaxWidth.Large };

    var dialog = await DialogService.ShowAsync<CreateOrUpdateEmployee>("Thêm Nhân Viên", options);

    var result = await dialog.Result;

    // kiểm tra điều kiện
    if (result is not null && !result.Canceled)
    {
      await dataGrid.ReloadServerData();
    }

  }
}